from os import getenv

import requests
import streamlit as st
from PIL import Image


def __crop_face(bbox: list[int], image_file: bytes) -> Image:
    image = Image.open(image_file)
    return image.crop(bbox)


def __recognize(image_bytes) -> list[dict[str, str | list[int]] | dict]:
    files = {"file": image_bytes}
    response = requests.post(f"{getenv('BACKEND_URI')}/recognize/image", files=files)
    if response.status_code == 200:
        return response.json()
    return []


st.set_page_config(page_title="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é", page_icon="üì∑")
image_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", type=["png", "jpg", "jpeg"])

if image_file is not None:
    st.image(image_file, width=250)
    st.text("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")
    with st.spinner("–†–∞—Å–ø–æ–∑–Ω–∞–µ–º..."):
        recognized_data = __recognize(image_bytes=image_file.read())
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    grid = st.columns(5)
    col = 0
    if recognized_data:
        for data in recognized_data:
            with grid[col]:
                st.image(
                    __crop_face(data["bbox"], image_file),
                    width=100,
                    caption=f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data['emotion']}",
                )
            col = (col + 1) % 5
    else:
        st.text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–æ –∏–ª–∏ —ç–º–æ—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª")
